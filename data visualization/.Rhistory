duration.cumrelfreq = duration.cumfreq / sum(sales$demand.ham)
old = options(digits = 2)
duration.cumrelfreq
cbind(duration.freq, duration.relfreq, duration.cumfreq,duration.cumrelfreq)
?ecdf
ecdf(9)
duration.freq
ecdf(duration.freq)
ecdf(sales$demand.ham)
plot(ecdf(sales$demand.ham))
plot(ecdf(duration.freq))
plot(ecdf(sales$demand.ham))
hamtable <- table(sales$date, sales$demand.ham) # A will be rows, B will be columns
hamtable # print table
# CREATE RELATIVE FREQUENCY DISTRIBUTION
duration = sales$demand.ham
range(duration)
breaks = seq(0, 25, by=1)
breaks
duration.cut = cut(duration, breaks, right = FALSE)
duration.freq = table(duration.cut)
duration.freq
cbind(duration.freq)
duration.relfreq = duration.freq/nrow(sales)
# CREATE CUMULATIVE RELATIVE FREQUENCY DISTRIBUTION
duration.cumfreq = cumsum(duration.freq)
duration.cumrelfreq = duration.cumfreq / sum(sales$demand.ham)
old = options(digits = 2)
duration.cumrelfreq
cbind(duration.freq, duration.relfreq, duration.cumfreq,duration.cumrelfreq)
# CREATE RELATIVE FREQUENCY DISTRIBUTION
duration = sales$demand.ham
range(duration)
breaks = seq(0, 25, by=.5)
breaks
duration.cut = cut(duration, breaks, right = FALSE)
duration.freq = table(duration.cut)
duration.freq
cbind(duration.freq)
duration = sales$demand.ham
range(duration)
# CREATE RELATIVE FREQUENCY DISTRIBUTION
duration = sales$demand.ham
range(duration)
breaks = seq(0, 41, by=1)
breaks
duration.cut = cut(duration, breaks, right = FALSE)
duration.freq = table(duration.cut)
duration.freq
cbind(duration.freq)
rpois(sales$demand.ham, 15.94615)
rpois(130, 15.94615)
rpois(130, 15.94615)*.6.5-3
rpois(130, 15.94615)*6.5-3
rpois(1,15.94615)*3
rpois(130,15.94615)*3
sum(rpois(130,15.94615)*3)
rpois(104, 1.98)
rpois(0:7, 1.98)
?pois
?ppois
rpois(0:7, 1.98)
ppois(0:7, 1.98)
ppois(0:25, 1.98)
ppois(1:25, 15.94615)
rpois(0:7, 1.98)
# Group Assignment for IS606
# Members: Honey Berk, Sonya Hong, Rajagopal Srinivasan, James Hamski
# See'Collaborative Assignment 1.pdf' for instructions
# Your job is to use the data to determine how many sandwiches of each type he should bring each day in order to maximize his expected profits.
details <- read.csv("details.csv", header = TRUE)
sales <- read.csv("sales.csv", header = TRUE)
profit.margin <- details$price - details$cost
ham.revenue <- sales$demand.ham * 6.5
turkey.revenue <- sales$demand.turkey * 6.5
veggie.revenue <- sales$demand.veggie * 5.0
ham.cost <- sales$available.ham * 3.5
turkey.cost <- sales$available.turkey * 4.0
veggie.cost <- sales$available.veggie * 2.5
distrham <- table(sales$demand.ham)/length(sales$demand.ham)
distrturkey <- table(sales$demand.turkey)/length(sales$demand.turkey)
distrveggie <- table(sales$demand.veggie)/length(sales$demand.veggie)
# figuring out average daily profit as a baseline, lambda, etc.
profit.ham <- ham.revenue - ham.cost
profit.turkey <- turkey.revenue - veggie.cost
profit.veggie <- veggie.revenue - veggie.cost
ave.profit <-c(mean(profit.ham), mean(profit.turkey), mean(profit.veggie))
ave.profit <- as.data.frame(ave.profit, row.names = c('ham', 'turkey', 'veggie'))
lambda.ham <- mean(sales$demand.ham)
lambda.turkey <- mean(sales$demand.turkey)
lambda.veggie <- mean(sales$demand.veggie)
#ham
model.ham <- 1-ppois((3/profit$profit[1]), lambda.ham)
#empirical
demand.sim <- sapply(1:10000, function(x) rpois(1,15))
hist(demand.sim)
#strategy
inventory.sim <- sapply(1:10000, function(x) rpois(1,9))
hist(inventory.sim)
balance = demand vis a vis inventory
lambda.iter <- 10:20
for lambda.iter
inventory<-rpois(1,lambda.iter)
demand <- rpois(1,15)
test <- sapply(1:100, function(x) rpois(1,15)*3)
model.ham <- 1-ppois((3/profit$profit[1]), lambda.ham)
#strategy
inventory.sim <- sapply(1:10000, function(x) rpois(1,9))
hist(inventory.sim)
plot(1, 1, xlim = c(0, 5), ylim = range(c(yI, yIV)), type = 'n', xlab = '', ylab = '', xaxt = 'n')
vioplot(yI, at = 1, add = T, col = 'magenta')
vioplot(yII, at = 2, add = T, col = 'green' )
vioplot(yIII, at = 3, add = T, col = 'blue' )
vioplot(yIV, at = 4, add = T, col = 'red' )
install.packages("vioplot") #THIS IS COOL!
proj2 <- read.csv("C:/Users/honey.berk/Dropbox (Personal)/MSDA/IS 607 - Data Structures/proj 2/proj2.csv")
proj2 <- read.table("C:/Users/Honey/Dropbox (Personal)/MSDA/IS 607 - Data Structures/proj 2/proj2.R", header=TRUE, quote="\"")
View(proj2)
proj2 <- read.csv("C:/Users/Honey/Dropbox (Personal)/MSDA/IS 607 - Data Structures/proj 2/proj2.csv")
View(proj2)
attach(proj2)
xall <- cbind(xI, xII, xIII, xIV) #combine columns
yall <- cbine(yI, yII, yIII, yIV)
xall <- cbind(xI, xII, xIII, xIV) #combine columns
yall <- cbind(yI, yII, yIII, yIV)
I <- cbind(xI,yI)
II <- cbind(xII,yII)
III <- cbind(xIII,yIII)
IV <- cbind(xIV,yIV)
plot(xI, yI)
plot(xII, yII)
plot(xIII, yIII)
plot(xIV, yIV)
plot(proj2)
boxplot(proj2)
boxplot(yall) #shows outliers of y data - pg. 82 in cmu
hist(yI)
hist(yII)
summary(proj2)
matplot(proj2)
assocplot(yall)
yall
xall
I
plot(I)
hist(I)
matplot(I)
assocplot(I)
stars(I)
require(lattice)
barchart (yII ~ xII)
dotplot(yII~xII)
splom(~yall)
parallelplot(~yall)
parallelplot(I)
density(xII)
density(I)
require(stats) #do each one
Box.test(xI)
Box.test(II)
Box.test(yII)
cor.test(xII,yII)
cpgram(xI)
install.packages("e1071")
require(e1071)
skewness(yall)
skewness(I)
kurtosis(yall)
pairs(yall, gap = 0, panel = panel.smooth, col = c("red", "blue"))
pairs(proj2, gap = 0, panel = panel.smooth)
pairs(yall, gap = 0, panel = panel.smooth, col = c("red", "blue"))
pairs(I, gap = 0, panel = panel.smooth, col = c("red", "blue"))
pairs(proj2, gap = 0, panel = panel.smooth, col = c("red", "blue"))
require(vioplot)
plot(1, 1, xlim = c(0, 5), ylim = range(c(yI, yIV)), type = 'n', xlab = '', ylab = '', xaxt = 'n')
vioplot(yI, at = 1, add = T, col = 'magenta')
vioplot(yII, at = 2, add = T, col = 'green' )
vioplot(yIII, at = 3, add = T, col = 'blue' )
vioplot(yIV, at = 4, add = T, col = 'red' )
require(ggplot2)
vis <- qplot(xI, xII, colour = Tree, geom = "line")
vis
vis
vis
vis <- qplot(xI, xII, colour = blue, geom = "line")
vis
vis <- qplot(xI, xII, \geom = "line")
\qplot(xI, xII, \geom = "line")
vis <- qplot(xI, xII, geom = "line")
vis
vis <- qplot(xI, yI, geom = "line")
vis
vis <- qplot(xI, yI, geom = "line", color = yII)
vis
vis <- qplot(xall, yall, geom = "line", color = yII)
vis
vis
vis <- qplot(xall, yall, geom = "line" )
vis
vis <- qplot(xI, yI, geom = "line", color = yI)
vis
vis + aes(x=xI, y=yI, colour=yI))
olor = yI)
ggplot + aes(x=xI, y=yI, colour=yI))
ggplot + aes(x=xI, y=yI, colour=yI))
ylab="Density")
ylab="Density"
qplot(xall, geom="density", fill=yall, alpha=I(.5), main="Distribution of Gas Milage", xlab="Miles Per Gallon", ylab="Density")
qplot(xI, geom="density", fill=yall, alpha=I(.5), main="Distribution of Gas Milage", xlab="Miles Per Gallon", ylab="Density")
qplot(xI, geom="density", fill=yI, alpha=I(.5), main="Distribution of Gas Milage", xlab="Miles Per Gallon", ylab="Density")
qplot(xI, geom="density", fill=yI, main="Distribution of Gas Milage", xlab="Miles Per Gallon", ylab="Density")
qplot(xI, geom="density", alpha=I(.5), main="Distribution of Gas Milage", xlab="Miles Per Gallon", ylab="Density")
qplot(xI, geom="density", fill=yI, alpha=I(.5), main="Distribution of Gas Milage", xlab="Miles Per Gallon", ylab="Density")
qplot(xI, geom="density", fill=xII, alpha=I(.5), main="Distribution of Gas Milage", xlab="Miles Per Gallon", ylab="Density")
qplot(xI, geom="density", fill=xI, alpha=I(.5), main="Distribution of Gas Milage", xlab="Miles Per Gallon", ylab="Density")
qplot(xI, geom="density", alpha=I(.5), main="Distribution of Gas Milage", xlab="Miles Per Gallon", ylab="Density")
p <- qplot(xI, yI, shape=am, color=am, facets=xII~yII, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
p
p <- qplot(xI, yI, shape=yII, color=yII, facets=xII~yII, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
p
attach(proj2)
install.packages("e1071")
install.packages("e1071")
assocplot(yall)
assocplot(xI,yI)
assocplot(yI)
matplot(yall)
maplot(xall)
---
title: "wk9hw"
author: "Honey Berk"
date: "Sunday, March 29, 2015"
output: html_document
---
**IS607 - Week 9 Assignment**
Note: Must have the following packages installed: rvest, SML, jsonlite, curl
***html***
```{r, echo=TRUE}
library(rvest)
#read url of html file
books_html <- html("http://www.2geeks.it/msda/books.html")
#scrape html table data, first row is header
html.data <- books_html %>%
html_nodes("table") %>%
html_table(header = TRUE)
print(html.data)
```
***xml***
```{r, echo=TRUE}
library(XML)
#read url of xml file
uxml <- "http://www.2geeks.it/msda/books.xml"
#scrape xml data
xml.data <- xmlToDataFrame(uxml)
xml.data <- xml.data[c(1,2,7,8,3,4,5,6)] #fix column order
print(xml.data)
```
***json***
```{r, echo=TRUE}
library(jsonlite)
library(curl)
#read url of json file
ujson <- "http://www.2geeks.it/msda/books.json"
#scrape json data
json.data <- jsonlite::fromJSON(ujson)
json.data <- json.data$books[c(1,2,7,8,3,4,5,6)] #fix column order
print(json.data)
```
library(rvest)
#read url of html file
books_html <- html("http://www.2geeks.it/msda/books.html")
#scrape html table data, first row is header
html.data <- books_html %>%
html_nodes("table") %>%
html_table(header = TRUE)
print(html.data)
html.data
json.data
html.data <- as.data.frame(html.data)
print(html.data)
file.edit('~/.Rprofile')
install.packages("gridExtra")
x <- awards_mod[3:25]
y <- awards_mod[3:25]
cor(x, y)
x <- awards_mod[3:25]
awards_mod <- awards_re_modified
awards_mod[is.na(awards_mod)] <- 0
head(awards_mod)
```{r, echo = TRUE}
awards_mod <- awards_re_modified #create new var to preserve original
awards_mod[is.na(awards_mod)] <- 0 #set NA = 0
awards_mod <- awards_re_modified #create new var to preserve original
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
awards_modified <- awards_df[,c(1,3,4,6)]
head(awards_modified)
awards_modified <- awards_modified %>%
group_by(movie_id,year,category_id) %>%
summarise(won=max(won))
awards_re_modified <- spread((awards_modified),category_id,won)
head(awards_re_modified)
award_categories <- unique(data.frame(category_id=awards_df$category_id,category_name=awards_df$category_name))
rownames(award_categories) <- NULL
names(awards_re_modified) <- c("movie_id", "year",  "c1",  "c2",  "c3",  "c4",  "c5", "c6",  "c7",  "c8",  "c9", "c10", "c11", "c12",
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
awards_modified <- awards_df[,c(1,3,4,6)]
head(awards_modified)
awards_modified <- awards_modified %>%
group_by(movie_id,year,category_id) %>%
summarise(won=max(won))
awards_re_modified <- spread((awards_modified),category_id,won)
head(awards_re_modified)
award_categories <- unique(data.frame(category_id=awards_df$category_id,category_name=awards_df$category_name))
rownames(award_categories) <- NULL
names(awards_re_modified) <- c("movie_id", "year",  "c1",  "c2",  "c3",  "c4",  "c5", "c6",  "c7",  "c8",  "c9", "c10", "c11", "c12",
"c13", "c14", "c15","c16", "c17", "c18", "c19", "c20", "c21", "c22", "c23")
```
library(dplyr)
library(tidyr)
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
awards_modified <- awards_df[,c(1,3,4,6)]
head(awards_modified)
awards_modified <- awards_modified %>%
group_by(movie_id,year,category_id) %>%
summarise(won=max(won))
awards_re_modified <- spread((awards_modified),category_id,won)
head(awards_re_modified)
award_categories <- unique(data.frame(category_id=awards_df$category_id,category_name=awards_df$category_name))
rownames(award_categories) <- NULL
names(awards_re_modified) <- c("movie_id", "year",  "c1",  "c2",  "c3",  "c4",  "c5", "c6",  "c7",  "c8",  "c9", "c10", "c11", "c12",
"c13", "c14", "c15","c16", "c17", "c18", "c19", "c20", "c21", "c22", "c23")
```
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
awards_modified <- awards_df[,c(1,3,4,6)]
head(awards_modified)
awards_modified <- awards_modified %>%
group_by(movie_id,year,category_id) %>%
summarise(won=max(won))
awards_re_modified <- spread((awards_modified),category_id,won)
head(awards_re_modified)
award_categories <- unique(data.frame(category_id=awards_df$category_id,category_name=awards_df$category_name))
rownames(award_categories) <- NULL
names(awards_re_modified) <- c("movie_id", "year",  "c1",  "c2",  "c3",  "c4",  "c5", "c6",  "c7",  "c8",  "c9", "c10", "c11", "c12", "c13", "c14", "c15","c16", "c17", "c18", "c19", "c20", "c21", "c22", "c23")
```
rownames(award_categories) <- NULL
award_categories <- unique(data.frame(category_id=awards_df$category_id,category_name=awards_df$category_name))
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
setwd("C:/Users/Honey/Dropbox (Personal)/MSDA/IS 607 - Data Structures/proj 3/607Project3")
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
awards_modified <- awards_df[,c(1,3,4,6)]
head(awards_modified)
awards_modified <- awards_modified %>%
group_by(movie_id,year,category_id) %>%
summarise(won=max(won))
awards_re_modified <- spread((awards_modified),category_id,won)
head(awards_re_modified)
award_categories <- unique(data.frame(category_id=awards_df$category_id,category_name=awards_df$category_name))
rownames(award_categories) <- NULL
names(awards_re_modified) <- c("movie_id", "year",  "c1",  "c2",  "c3",  "c4",  "c5", "c6",  "c7",  "c8",  "c9", "c10", "c11", "c12", "c13", "c14", "c15","c16", "c17", "c18", "c19", "c20", "c21", "c22", "c23")
```
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
setwd("C:/Users/Honey/Dropbox (Personal)/MSDA/IS 607 - Data Structures/proj 3/607Project3/data visualization")
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
awards_modified <- awards_df[,c(1,3,4,6)]
head(awards_modified)
awards_modified <- awards_modified %>%
group_by(movie_id,year,category_id) %>%
summarise(won=max(won))
awards_re_modified <- spread((awards_modified),category_id,won)
head(awards_re_modified)
award_categories <- unique(data.frame(category_id=awards_df$category_id,category_name=awards_df$category_name))
rownames(award_categories) <- NULL
names(awards_re_modified) <- c("movie_id", "year",  "c1",  "c2",  "c3",  "c4",  "c5", "c6",  "c7",  "c8",  "c9", "c10", "c11", "c12", "c13", "c14", "c15","c16", "c17", "c18", "c19", "c20", "c21", "c22", "c23")
```
awards_mod <- awards_re_modified #create new var to preserve original
awards_mod[is.na(awards_mod)] <- 0 #set NA = 0
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(awards_mod[3:25])), fill=value, geom="tile")
x <- awards_mod[3:25]
y <- awards_mod[3:25]
cor(x, y)
summary(win)
awards_df <- read.csv ('C:/DataR/Awards_File.csv',stringsAsFactors=F)
parallelplot(win[3:25])
awards_mod <- na.omit(awards_mod)
awards_mod
awards_mod <- na.omit(awards_re_modified)
awards_mod
wards_mod <- awards_re_modified
awards_mod[is.na(awards_mod)] <- 0
awards_mod <- awards_re_modified
awards_mod[is.na(awards_mod)] <- 0
awards_mod
apply(awards_re_modified,2,max,na.rm=TRUE)
df <- apply(awards_re_modified,2,max,na.rm=TRUE)
df
df <- filter(awards_re_modified, c16 != NA)
df
awards_re_modified
df <- filter(awards_re_modified, c16 != NA)
df
df <- filter(awards_re_modified, c16 == 0 | c16 == 1)
df
bpnoms <- filter(awards_re_modified, c16 == 0 | c16 == 1)
w.new <- cor(bpnoms[3:25])
corrplot(W, method = "circle")
library(corrplot)
w.new <- cor(bpnoms[3:25])
corrplot(W, method = "circle")
w.new <- cor(bpnoms[3:25])
corrplot(W.new, method = "circle")
w.new <- cor(bpnoms[3:25])
corrplot(W.new, method = "circle")
corrplot(W.new, method = "circle")
W <- cor(awards_mod[3:25])
corrplot(W, method = "circle")
w.new <- cor(bpnoms[3:25])
w.new
bpnoms <- filter(awards_re_modified, c16 == 0 | c16 == 1)
bpnoms
w.new[is.na(w.new)] <- 0
w.new
corrplot(W.new, method = "circle")
corrplot(w.new, method = "circle")
names(awards_re_modified) <- c("movie_id", "year","ACTOR -- LEADING ROLE","ACTOR -- SUPPORTING ROLE","ACTRESS
LEADING ROLE","ACTRESS SUPPORTING ROLE","ANIMATED FEATURE FILM","ART DIRECTION","CINEMATOGRAPHY","COSTUME
DESIGN","DIRECTING","DOCUMENTARY FEATURE","DOCUMENTARY SHORT SUBJECT","FILM EDITING","MAKEUP","MUSIC
SCORING","MUSIC SONG","BEST PICTURE","SHORT FILM ANIMATED","SHORT FILM LIVE ACTION","SOUND","SOUND
EDITING","VISUAL EFFECTS","WRITING","DOCUMENTARY OTHER")
awards_re_modified
awards_mod <- awards_re_modified #create new var to preserve original
awards_mod[is.na(awards_mod)] <- 0 #set NA = 0
W <- cor(awards_mod[3:25]) #correlate c1:c23
corrplot(W, method = "circle")
corrplot(W, method = "ellipse")
qplot(x=Var1, y=Var2, data=melt(cor(awards_mod[3:25])), fill=value, geom="tile")
x <- awards_mod[3:25]
y <- awards_mod[3:25]
cor(x, y)
```
x <- awards_mod[3:25]
y <- awards_mod[3:25]
cor(x, y)
bpnoms <- filter(awards_re_modified, c16 == 0 | c16 == 1)
bpnoms <- filter(awards_mod, c16 == 0 | c16 == 1)
bpnoms <- filter(awards_mod, "BEST PICTURE" == 0 | "BEST PICTURE" == 1)
bpnoms
bpnoms <- filter(awards_mod, "BEST PICTURE" != 0 | "BEST PICTURE" != 1)
bpnoms
w.new <- cor(bpnoms[3:25])
corrplot(w.new, method = "circle")
x <- bpnoms[3:25]
y <- bpnoms[3:25]
cor(x, y)
awards_re_modified
bpnoms <- filter(awards_re_modified, "BEST PICTURE" != 0 | "BEST PICTURE" != 1)
bpnoms
bpnoms <- filter(awards_re_modified, "BEST PICTURE" != 0 | "BEST PICTURE" != 1, na.rm = T)
bpnoms
cor(x, y, na.rm = T)
length(bpnoms)
bpnoms
nona_bpnoms = bpnoms[!is.na(bpnoms)]
nona_bpnoms
x <- nona_bpnoms[3:25]
y <- nona_bpnoms[3:25]
cor(x, y)
length(bpnoms)
nona_bpnoms
remove(nona_bpnoms)
is.na(bpnoms)
compareNA <- function(v1,v2) {
same <- (v1 == v2) | (is.na(v1) & is.na(v2))
same[is.na(same)] <- FALSE
return(same)
}
compareNA(bpnoms)
remove(compareNA)
corrplot(w.new, method = "circle")
corrplot(w.new, method = "circle", tl.cex = 100)
corrplot(w.new, method = "circle", tl.cex = 10)
corrplot(w.new, method = "circle", tl.cex = 1)
corrplot(w.new, method = "circle", tl.cex = 0.5)
corrplot(W, method = "circle", tl.cex = 0.5)
corrplot(W, method = "ellipse", tl.cex = 0.5)
corrplot(W, method = "square", tl.cex = 0.5)
qplot(x=Var1, y=Var2, data=melt(cor(awards_mod[3:25])), fill=value, geom="tile")
cor(x, y)
x <- awards_mod[3:25]
y <- awards_mod[3:25]
cor(x, y)
bpnoms
newdata <- na.omit(bpnoms)
newdata
install.packages(amelia)
install.packages("Amelia")
library(amelia)
library(Amelia)
??Ameilia
AmeliaView
bpnoms
a.out <- amelia(x = bpnoms)
a.out <- amelia(x = bpnoms, )
qplot(x=Var1, y=Var2, data=melt(cor(awards_mod[3:25])), fill=value, geom="tile") + theme(axis.text=element_text(size=12)
qplot(x=Var1, y=Var2, data=melt(cor(awards_mod[3:25])), fill=value, geom="tile") + theme(axis.text=element_text(size=12))
cm <- qplot(x=Var1, y=Var2, data=melt(cor(awards_mod[3:25])), fill=value, geom="tile")
cm + theme(axis.text=element_text(size=12))
cm + theme(axis.text=element_text(size=10))
cm + theme(axis.text=element_text(size=8))
