library(ggthemes)
JHT2 <-function(){
theme_tuft()+
theme(panel.background=element_rect(fill=color.plot.area, color=color.plot.area)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color="gray20", size = 0.15)) +
theme(panel.grid.major=element_line(color=color.grid.major,size=.25,
linetype = "longdash")) +
theme(axis.line = element_line(color=color.grid.major, size = .5))+
theme(panel.grid.minor=element_blank()) +
theme(plot.title=element_text(color=color.title, size=10)) +
theme(axis.text.x=element_text(size=12,color=color.axis.text)) +
theme(axis.text.y=element_text(size=12,color=color.axis.text)) +
theme(axis.title.x=element_text(size=14,color=color.axis.title, face = "bold")) +
theme(axis.title.y=element_text(size=14,color=color.axis.title, face = "bold"))
}
library(ggplot2)
ggplot(data = DF, aes(x = x, y = y)) +geom_point() + theme_tufte() + geom_smooth(method="lm", color="red", linetype=2) + geom_rangeframe()
x <- rnorm(100, 50, 25)
y <- -0.3*x^2 + 25*x + 92 + rnorm(100, sd=300)
DF <- data.frame(cbind(x, y))
ggplot(data = DF, aes(x = x, y = y)) +geom_point() + theme_tufte() + geom_smooth(method="lm", color="red", linetype=2) + geom_rangeframe()
JHT2 <-function(){
theme_tuft()+
theme(panel.background=element_rect(fill=color.plot.area, color=color.plot.area)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color="gray20", size = 0.15)) +
theme(panel.grid.major=element_line(color=color.grid.major,size=.25,
linetype = "longdash")) +
theme(axis.line = element_line(color=color.grid.major, size = .5))+
theme(panel.grid.minor=element_blank()) +
theme(plot.title=element_text(color=color.title, size=10)) +
theme(axis.text.x=element_text(size=12,color=color.axis.text)) +
theme(axis.text.y=element_text(size=12,color=color.axis.text)) +
theme(axis.title.x=element_text(size=14,color=color.axis.title, face = "bold")) +
theme(axis.title.y=element_text(size=14,color=color.axis.title, face = "bold"))
}
?theme_tufte
JHT2 <-function(){
theme_tuft(base_size=10, ticks = FALSE)+
theme(panel.background=element_rect(fill=color.plot.area, color=color.plot.area)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color="gray20", size = 0.15)) +
theme(panel.grid.major=element_line(color=color.grid.major,size=.25,
linetype = "longdash")) +
theme(axis.line = element_line(color=color.grid.major, size = .5))+
theme(panel.grid.minor=element_blank()) +
theme(plot.title=element_text(color=color.title, size=10)) +
theme(axis.text.x=element_text(size=12,color=color.axis.text)) +
theme(axis.text.y=element_text(size=12,color=color.axis.text)) +
theme(axis.title.x=element_text(size=14,color=color.axis.title, face = "bold")) +
theme(axis.title.y=element_text(size=14,color=color.axis.title, face = "bold"))
}
ggplot(data = DF, aes(x = x, y = y)) +geom_point() + theme_tufte() + geom_smooth(method="lm", color="red", linetype=2) + geom_rangeframe()
JHT2 <-function(){
color.plot.area = "ivory"
color.background = "white"
color.grid.major = "black"
color.axis.text = "gray29"
color.axis.title = "gray29"
color.title = "gray29"
theme_tuft(base_size=10, ticks = FALSE)+
theme(panel.background=element_rect(fill=color.plot.area, color=color.plot.area)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color="gray20", size = 0.15)) +
theme(panel.grid.major=element_line(color=color.grid.major,size=.25,
linetype = "longdash")) +
theme(axis.line = element_line(color=color.grid.major, size = .5))+
theme(panel.grid.minor=element_blank()) +
theme(plot.title=element_text(color=color.title, size=10)) +
theme(axis.text.x=element_text(size=12,color=color.axis.text)) +
theme(axis.text.y=element_text(size=12,color=color.axis.text)) +
theme(axis.title.x=element_text(size=14,color=color.axis.title, face = "bold")) +
theme(axis.title.y=element_text(size=14,color=color.axis.title, face = "bold"))
}
ggplot(data = DF, aes(x = x, y = y)) +geom_point() + theme_tufte() + geom_smooth(method="lm", color="red", linetype=2) + geom_rangeframe()
ggplot(data = DF, aes(x = x, y = y)) +geom_point() + theme_tufte() + + stat_smooth(method="lm", formula = y ~ poly(x, 2), color="red", linetype=2) + geom_rangeframe()
ggplot(data = DF, aes(x = x, y = y)) +geom_point() + theme_tufte() + stat_smooth(method="lm", formula = y ~ poly(x, 2), color="red", linetype=2) + geom_rangeframe()
JHT <-function(){
color.plot.area = "ivory"
color.background = "white"
color.grid.major = "black"
color.axis.text = "gray29"
color.axis.title = "gray29"
color.title = "gray29"
theme_bw(base_size=9) +
theme(panel.background=element_rect(fill=color.plot.area, color=color.plot.area)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color="gray20", size = 0.15)) +
theme(panel.grid.major=element_line(color=color.grid.major,size=.25,
linetype = "longdash")) +
theme(axis.line = element_line(color=color.grid.major, size = .5))+
theme(panel.grid.minor=element_blank()) +
theme(plot.title=element_text(color=color.title, size=10)) +
theme(axis.text.x=element_text(size=12,color=color.axis.text)) +
theme(axis.text.y=element_text(size=12,color=color.axis.text)) +
theme(axis.title.x=element_text(size=14,color=color.axis.title, face = "bold")) +
theme(axis.title.y=element_text(size=14,color=color.axis.title, face = "bold"))
}
ggplot(data = DF, aes(x = x, y = y)) +geom_point() +JHT() + stat_smooth(method="lm", formula = y ~ poly(x, 2),
)
ggplot(data = DF, aes(x = x, y = y)) +geom_point() +JHT() + stat_smooth(method="lm", formula = y ~ poly(x, 2), color="red", linetype=2) + geom_rangeframe()
ggplot(data = DF, aes(x = x, y = y)) +geom_point() +JHT() + stat_smooth(method="lm", formula = y ~ poly(x, 2), color="red", linetype=1) + geom_rangeframe()
ggplot(data = DF, aes(x = x, y = y)) +geom_point() + theme_tufte() + stat_smooth(method="lm", formula = y ~ poly(x, 2), color="red", linetype=1) + geom_rangeframe()
JHT2 <-function(){
color.plot.area = "ivory"
color.background = "white"
color.grid.major = "black"
color.axis.text = "gray29"
color.axis.title = "gray29"
color.title = "gray29"
theme_tuft(base_size=10, ticks = FALSE)+
theme(panel.background=element_rect(fill=color.plot.area, color=color.plot.area)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color="gray20", size = 0.15)) +
theme(panel.grid.major=element_line(color=color.grid.major,size=.25,
linetype = "longdash")) +
theme(axis.line = element_line(color=color.grid.major, size = .5))+
theme(panel.grid.minor=element_blank()) +
theme(plot.title=element_text(color=color.title, size=10)) +
theme(axis.text.x=element_text(size=12,color=color.axis.text)) +
theme(axis.text.y=element_text(size=12,color=color.axis.text)) +
theme(axis.title.x=element_text(size=14,color=color.axis.title, face = "bold")) +
theme(axis.title.y=element_text(size=14,color=color.axis.title, face = "bold"))
}
JHT2 <-function(){
color.plot.area = "ivory"
color.background = "white"
color.grid.major = "black"
color.axis.text = "gray29"
color.axis.title = "gray29"
color.title = "gray29"
theme_tuft(base_size=10, ticks = FALSE) +
theme(panel.background=element_rect(fill=color.plot.area, color=color.plot.area)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color="gray20", size = 0.15)) +
theme(panel.grid.major=element_line(color=color.grid.major,size=.25,
linetype = "longdash")) +
theme(axis.line = element_line(color=color.grid.major, size = .5))+
theme(panel.grid.minor=element_blank()) +
theme(plot.title=element_text(color=color.title, size=10)) +
theme(axis.text.x=element_text(size=12,color=color.axis.text)) +
theme(axis.text.y=element_text(size=12,color=color.axis.text)) +
theme(axis.title.x=element_text(size=14,color=color.axis.title, face = "bold")) +
theme(axis.title.y=element_text(size=14,color=color.axis.title, face = "bold"))
}
ggplot(data = DF, aes(x = x, y = y)) +geom_point() + theme_tufte() + stat_smooth(method="lm", formula = y ~ poly(x, 2), color="red", linetype=1) + geom_rangeframe()
install.packages("RPostgreSQL")
library("RPostgreSQL")
y <- dnorm(10, 4, 2)
y
y <- dnorm(1:10, 4, 2)
y
?dnorm
x <- 1:10
y <- dnorm(1:10, mean = 0, sd =1)
y
y <- pnorm(1:10, mean = 0, sd =1)
y
data <- cbind(x,y)
data
y <- rnorm(1:10, mean = 0, sd =1)
y
data.frame(data)
x <- 1:10
y <- rnorm(1:10, mean = 0, sd =1)
data <- cbind(x,y)
data.frame(data)
?save
?load
x <- 1:10
y <- rnorm(1:10, mean = 0, sd =1)
data <- cbind(x,y)
data.frame(data)
save(data.frame, file = "savedFile.RData")
plot(data.frame)
plot(data.frame)
x <- 1:10
y <- rnorm(1:10, mean = 0, sd =1)
data <- cbind(x,y)
DF<-data.frame(data)
save(data.frame, file = "savedFile.RData")
plot(DF)
plot(DF)
plot(DF)
load(file = "savedFile.Rdata")
plot(DF)
DF<-load(file = "savedFile.Rdata")
plot(DF)
str(DF)
x <- 1:10
y <- rnorm(1:10, mean = 0, sd =1)
data <- cbind(x,y)
DF<-data.frame(data)
plot(DF)
setwd("~/Documents/R/KM")
save(data.frame, file = "savedFile.RData")
DF<-load(file = "savedFile.Rdata")
plot(DF)
load(file = "savedFile.Rdata")
plot(DF)
DF
?load
data.frame
x <- 1:10
y <- rnorm(1:10, mean = 0, sd =1)
data <- cbind(x,y)
DF<-data.frame(data)
plot(DF)
save(DF, file = "savedFile.RData")
load(file = "savedFile.Rdata")
plot(DF)
plot(DF)
x <- 1:10
y <- rnorm(1:10, mean = 0, sd =1)
data <- cbind(x,y)
DF<-data.frame(data)
plot(DF)
save(DF, file = "savedFile.RData")
plot(DF)
load(file = "savedFile.Rdata")
plot(DF)
install.packages("caret")
library(rpart)
?rpart
?by
?rep
setwd("~/Documents/Graduate School/IS 607/607Project3")
#Data Analysis
#Sekhar
#Work in progress - 2/22/2015
library(dplyr)
library(tidyr)
setwd("C:/Users/Sekhar/Documents/Github/Project_3_607_My_Work")
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
awards_modified <- awards_df[,c(1,3,4,6)]
head(awards_modified)
#The awards_modified data frame has some movies, which are nominated for the same category more than once, and has also won for one of its nominations (see below example)
#> awards_modified[2720:2721,]
#movie_id year category_id won row_num
#2720     1536 1984           1   0
#2721     1536 1984           1   1
#We have to group by movie_id, year, category_id, and max(won)
#such group by will include just the winning nomination, if a film is nominated multiple times in the same category, and one of the nominations win in that category.
awards_modified <- awards_modified %>%
group_by(movie_id,year,category_id) %>%
summarise(won=max(won))
#The above transformation has eliminated all the duplicate rows, where the same movie has been nominated in the same category more than once and one of them wins.
#It just includes the winning nomination. If none of the multiple nominations win, then only one of the nominations are included.
#The below command confirms that for the movie_id=1536, only the winning nomination is inluded
awards_modified[awards_modified$movie_id==1536,]
#Now the spread() function can be applied to awards_modified data frame.
awards_re_modified <- spread((awards_modified),category_id,won)
#The above command will produce another data frame called awards_re_modified, with the following columns:
#movie_id - Movie IDentifier
#Year - Year of award
#Award categories from 1 to 23
#Wherever a movie wins award, the respective category will have 1, wherever a movie is nominated, then the corresponding category will have 0, and wherever the movie is
#neither nominated nor wins, we will have NA
head(awards_re_modified)
#To get the category names (since the above dataframe contains the categories as numbers), let us create a separate data frame:
award_categories <- unique(data.frame(category_id=awards_df$category_id,category_name=awards_df$category_name))
rownames(award_categories) <- NULL
award_categories
#Since the variables are not allowed to start with numeric values, let us rename the column names of the data frame awards_re_modified to character variables.
#For example, the variable name "1" represents the award category_ID 1. We will change this to c1, to represent category 1.
names(awards_re_modified) <- c("movie_id", "year",  "c1",  "c2",  "c3",  "c4",  "c5", "c6",  "c7",  "c8",  "c9", "c10", "c11", "c12",
"c13", "c14", "c15","c16", "c17", "c18", "c19", "c20", "c21", "c22", "c23")
#The "Best Picture" category_id is 16 and "Film Editing" category_id is 12
#We have to identify which categories can help us to predict if a film gets the best picture, and determine if film_editing has the maximum probability.
#So finally we have the following data frames to work/use for our analysis:
#award_categories
#awards_re_modified
#The awards_re_modified data frame's each row contains Movie ID, Year, categories in which the movie nominated (the categories are indicated by c1, c2...c23)
#If a category contains NA, then the movie is NOT nominated
#If a category contains 0 then the movie is nominated, but did not win
#If a category contains 1 then the movie is nominated and also won the award in that category.
#Displaying the dimensions of the awards_re_modified data frame.
dim(awards_re_modified)
#The prop.table() function can be used to get the proportions. See examples below
prop.table(table(awards_re_modified[,c("c12","c16")],useNA=c("no")))
prop.table(table(awards_re_modified[,c("c1","c16")],useNA=c("no")))
#displaying head of data frame.
head(awards_re_modified,150)
setwd("~/Documents/Graduate School/IS 607/607Project3/Final_Analysis_File")
awards_df <- read.csv(source("Awards_File.csv", chdir = TRUE),stringsAsFactors=F)
source("Awards_File.csv", chdir = TRUE)
source("Awards_File.csv", chdir = TRUE)
?source
library(dplyr)
library(tidyr)
### Change below to your source directory before running
setwd("~/Documents/Graduate School/IS 607/607Project3/Final_Analysis_File")
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
awards_modified <- awards_df[,c(1,3,4,6)]
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
awards_modified <- awards_df[,c(1,3,4,6)]
head(awards_modified)
awards_df
awards_df <- read.csv("Awards_File.csv",stringsAsFactors=F)
str(awards_df)
install.packages("C50")
library(c50)
library(C50)
data(churn)
?C50
