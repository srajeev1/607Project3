{
#man, he got 100$ envelop so just remove two of the 3 empty ones
envelop <- envelop[-c(1,3)]
}
if (switchenv == 1) #if he prefer to switch
{
firstpick <- envelop[1]
}
#the bill is 100 then 1 else 0
if (bills[firstpick] == 100) 1 else 0
}
#lets repeat the above.
simbill <- replicate(100, simenv(1))
mean(simbill)
#------------------------------------
#sealed envelop simulation.
#Four identical sealed envelopes are on a table. One of them contains a $100 bill. You select an envelope at random and hold it in
# your hand without opening it. Two of the three remaining envelopes are then removed and set aside, unopened. You are told that they are empty. You are given the choice of keeping the envelope you chose or
#exchanging it for the one on the table. What should you do
#------------------------------------
simenv <- function(switchenv) {
envelop <- c(1,2,3,4)
bills <- c(0,100,0,0)
firstpick <- sample(envelop, 1)
#remove 2 empty env from 1,3,4 , but not the first picked one
if (firstpick == 1)
{
#remove 3,4
envelop <- envelop[-c(3,4)]
}
else if (firstpick == 3)
{
#remove 1,4
envelop <- envelop[-c(1,4)]
}
else if (firstpick == 4)
{
#remove 1,3
envelop <- envelop[-c(1,3)]
}
else
{
#man, he got 100$ envelop so just remove two of the 3 empty ones
envelop <- envelop[-c(1,3)]
}
if (switchenv == 1) #if he prefer to switch
{
firstpick <- envelop[1]
}
#the bill is 100 then 1 else 0
if (bills[firstpick] == 100) 1 else 0
}
#lets repeat the above.
simbill <- replicate(100, simenv(1))
mean(simbill)
simenv <- function(switchenv) {
envelop <- c(1,2,3,4)
bills <- c(0,100,0,0)
firstpick <- sample(envelop, 1)
#remove 2 empty env from 1,3,4 , but not the first picked one
if (firstpick == 1)
{
#remove 3,4
envelop <- envelop[-c(3,4)]
}
else if (firstpick == 3)
{
#remove 1,4
envelop <- envelop[-c(1,4)]
}
else if (firstpick == 4)
{
#remove 1,3
envelop <- envelop[-c(1,3)]
}
else
{
#man, he got 100$ envelop so just remove two of the 3 empty ones
envelop <- envelop[-c(1,3)]
}
if (switchenv == 1) #if he prefer to switch
{
firstpick <- envelop[1]
}
#the bill is 100 then 1 else 0
if (bills[firstpick] == 100) 1 else 0
}
#lets repeat the above.
simbill <- replicate(1000, simenv(1))
mean(simbill)
#lets repeat the above.
simbill <- replicate(1000, simenv(0))
mean(simbill)
#lets repeat the above.
simbill <- replicate(1000, simenv(0))
mean(simbill)
install.packages('RPostgresSQL')
library(RPostgreSQL)
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs <- dbSendQuery(con,
rs <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
#fetch observations
#fetch observations
#fetch observations
df <- fetch(rs, n=-1)
dbClearResult(rs)
dbDisconnect(con)
library(RPostgreSQL)
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
df <- fetch(rs, n=-1)
df
dbClearResult(rs)
dbDisconnect(con)
plot(df)
ggplot(df, aes(x=Year, y=delay, colour=delay, group=delay)) + geom_line()
library(ggplot2)
ggplot(df, aes(x=Year, y=delay, colour=delay, group=delay)) + geom_line()
df
ggplot(df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay, group=total_arr_delaydelay)) + geom_line()
ggplot(df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay, group=total_arr_delay)) + geom_line()
ggplot(df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay, group=total_arr_delay)) + geom_line()
ggplot(df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_line()
ggplot(df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_line()
install.packages('ggplot2')
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(RPostgreSQL)
library(ggplot2)
library(ggplot2)
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs <- dbSendQuery(con,
rs <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
df <- fetch(rs, n=-1)
df
df
str(df)
library(scales)
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_line() + scale_y_continuous(lables=comma)
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_line() + scale_y_continuous(labels=comma)
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_line(show_guide=FALSE) + scale_y_continuous(labels=comma)
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_line(show_guide=FALSE) + scale_y_continuous(labels=comma)
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_line(show_guide=FALSE) + scale_y_continuous(labels=comma)
+ geom_point(data=df, aes(x=manufactured_year, y=total_arr_delay, color='Center')) +
geom_point(data=df, aes(x=manufactured_year, y=total_arr_delay, color='Center'), size=52, alpha=.3, show_guide=FALSE
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point(show_guide=FALSE) + scale_y_continuous(labels=comma)
+ geom_point(data=df, aes(x=manufactured_year, y=total_arr_delay, color='Center')) +
geom_point(data=df, aes(x=manufactured_year, y=total_arr_delay, color='Center'), size=52, alpha=.3, show_guide=FALSE
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point(show_guide=FALSE) + scale_y_continuous(labels=comma)
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point(show_guide=FALSE) + scale_y_continuous(labels=comma)
plot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point(show_guide=FALSE) + scale_y_continuous(labels=comma)
+ geom_point(data=df, aes(x=manufactured_year, y=total_arr_delay, color='Center')) +
geom_point(data=df, aes(x=manufactured_year, y=total_arr_delay, color='Center'), size=52, alpha=.3, show_guide=FALSE
plot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point(show_guide=FALSE) + scale_y_continuous(labels=comma)
+ geom_point(data=df, aes(x=manufactured_year, y=total_arr_delay, color='Center')) +
geom_point(data=df, aes(x=manufactured_year, y=total_arr_delay, color='Center'), size=52, alpha=.3, show_guide=FALSE
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point(show_guide=FALSE) + scale_y_continuous(labels=comma)
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_line(show_guide=FALSE) + scale_y_continuous(labels=comma)
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point() + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_point() + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay)) + geom_point() + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay)) + geom_line(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay)) + geom_line(color="firebrick") + scale_y_continuous(labels=comma)
ggplot(data = df, aes(x=manufactured_year, y=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
rs <- dbSendQuery(con,
"select p.year as manufactured_year, round(average(f.arr_delay)) as average_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, average_arr_delay")
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs_total_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
rs_avg_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(average(f.arr_delay)) as average_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, average_arr_delay")
#fetch observations
df_total_delays <- fetch(rs_total_delays, n=-1)
df_average_delays <- fetch(rs_avg_delays, n=-1)
# Clearing the result set
dbClearResult(rs_total_delays)
dbClearResult(rs_avg_delays)
# Disconnect
dbDisconnect(con)
ggplot(data = df_total_delays, aes(x=manufactured_year, y=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df_average_delays, aes(x=manufactured_year, y=average_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs_total_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
rs_avg_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(average(f.arr_delay)) as average_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, average_arr_delay")
#fetch observations
df_total_delays <- fetch(rs_total_delays, n=-1)
df_avg_delays <- fetch(rs_avg_delays, n=-1)
# Clearing the result set
dbClearResult(rs_total_delays)
dbClearResult(rs_avg_delays)
# Disconnect
dbDisconnect(con)
ggplot(data = df_total_delays, aes(x=manufactured_year, y=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df_avg_delays, aes(x=manufactured_year, y=average_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs_total_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
rs_avg_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(average(f.arr_delay)) as average_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, average_arr_delay")
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs_total_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
#fetch observations
df_total_delays <- fetch(rs_total_delays, n=-1)
# Clearing the result set
dbClearResult(rs_total_delays)
#fetch observations
rs_avg_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(average(f.arr_delay)) as average_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, average_arr_delay")
df_avg_delays <- fetch(rs_avg_delays, n=-1)
# Clearing the result set
dbClearResult(rs_avg_delays)
# Disconnect
dbDisconnect(con)
ggplot(df, aes(x=manufactured_year, y=total_arr_delay, colour=total_arr_delay)) + geom_line()
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs_total_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
#fetch observations
df_total_delays <- fetch(rs_total_delays, n=-1)
# Clearing the result set
dbClearResult(rs_total_delays)
#fetch observations
rs_avg_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(average(f.arr_delay)) as average_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, average_arr_delay")
df_avg_delays <- fetch(rs_avg_delays, n=-1)
# Clearing the result set
dbClearResult(rs_avg_delays)
# Disconnect
dbDisconnect(con)
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs_total_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
#fetch observations
df_total_delays <- fetch(rs_total_delays, n=-1)
# Clearing the result set
dbClearResult(rs_total_delays)
#fetch observations
rs_avg_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(average(f.arr_delay)) as average_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, average_arr_delay")
df_avg_delays <- fetch(rs_avg_delays, n=-1)
# Clearing the result set
dbClearResult(rs_avg_delays)
# Disconnect
dbDisconnect(con)
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs_total_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
#fetch observations
df_total_delays <- fetch(rs_total_delays, n=-1)
# Clearing the result set
dbClearResult(rs_total_delays)
#fetch observations
rs_avg_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(avg(f.arr_delay)) as average_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, average_arr_delay")
df_avg_delays <- fetch(rs_avg_delays, n=-1)
# Clearing the result set
dbClearResult(rs_avg_delays)
# Disconnect
dbDisconnect(con)
ggplot(data = df_total_delays, aes(x=manufactured_year, y=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df_avg_delays, aes(x=manufactured_year, y=average_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs_total_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
#fetch observations
df_total_delays <- fetch(rs_total_delays, n=-1)
# Clearing the result set
dbClearResult(rs_total_delays)
#fetch observations
rs_avg_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(avg(f.arr_delay)) as average_arr_delay from planes p join flights f on p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, average_arr_delay")
df_avg_delays <- fetch(rs_avg_delays, n=-1)
# Clearing the result set
dbClearResult(rs_avg_delays)
# Disconnect
dbDisconnect(con)
# Plot the graph for total delays vs manf year
ggplot(data = df_total_delays, aes(x=manufactured_year, y=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
# Plot the graph for avg delays vs manf year
ggplot(data = df_avg_delays, aes(x=manufactured_year, y=average_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df_total_delays, aes(x=manufactured_year, y=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
con <- dbConnect(PostgreSQL(), user= "postgres", password="test123", dbname="flights")
rs_total_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(sum(f.arr_delay)) as total_arr_delay from planes p join flights f on p.tailnum = f.tailnum where
f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc, total_arr_delay")
#fetch observations
df_total_delays <- fetch(rs_total_delays, n=-1)
# Clearing the result set
dbClearResult(rs_total_delays)
#fetch observations
rs_avg_delays <- dbSendQuery(con,
"select p.year as manufactured_year, round(avg(f.arr_delay)) as average_arr_delay from planes p join flights f on
p.tailnum = f.tailnum where f.arr_delay > 0 and p.year is not null  group by manufactured_year order by manufactured_year desc,
average_arr_delay")
df_avg_delays <- fetch(rs_avg_delays, n=-1)
# Clearing the result set
dbClearResult(rs_avg_delays)
# Disconnect
dbDisconnect(con)
ggplot(data = df_total_delays, aes(x=manufactured_year, y=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df_avg_delays, aes(x=manufactured_year, y=average_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df_total_delays, aes(x=manufactured_year, y=total_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
ggplot(data = df_avg_delays, aes(x=manufactured_year, y=average_arr_delay)) + geom_point(color="firebrick") + scale_y_continuous(labels=comma) + stat_smooth()
agg.df <- aggregate(DepDelay ~ Origin+Month+DayofMonth, hflights_df, sum, na.action = na.omit)
hflights_df <- select(tbl_df(hflights),Year,Month, DayofMonth,DepDelay, Origin)
library(dplyr)
library(hflights)
data(hflights)
hflights_df <- select(tbl_df(hflights),Year,Month, DayofMonth,DepDelay, Origin)
agg.df <- aggregate(DepDelay ~ Origin+Month+DayofMonth, hflights_df, sum, na.action = na.omit)
agg.df
agg.df <- agg.df[order(agg.df$DepDelay, decreasing = TRUE), ]
agg.df
agg.list <- split(agg.df, list(agg.df$Origin))
agg.list
top.2 <- lapply(names(agg.list), function(x) { agg.list[[x]][1:2,]})
top.2
details <- read.csv(file="details.csv", header=TRUE, sep=",")
details$profit <- details$price - details$cost # Profit = Price - Cost
details$profit
details
details$profit
sales <- read.csv(file="sales.csv", header=TRUE, sep=",")
sales
sales$day <- weekdays(as.Date(sales$date)) # dates in terms of days of the week
sales$day
sales
library(plyr)
# average demand per day = number of sandwiches sold per day / total of sandwiches sold
ham <- ddply(sales, .(day), summarize, avg.demand = sum(demand.ham)/length(demand.ham))
# average profit per day = average demand per day * profit per sandwich
ham$avg.profit <- ham$avg.demand * details$profit[1]
(ham)
avg.demand <- data.frame(ham$day, round(ham$avg.demand,2), round(turkey$avg.demand,2),
round(veggie$avg.demand,2), stringsAsFactors=FALSE)
colnames(avg.demand) <- c("Day", "Ham", "Turkey", "Veggie")
(avg.demand)
avg.profit <- data.frame(ham$day, round(ham$avg.profit,2), round(turkey$avg.profit,2),
round(veggie$avg.profit,2), stringsAsFactors=FALSE)
colnames(avg.profit) <- c("Day", "Ham", "Turkey", "Veggie")
(avg.profit)
```
details <- read.csv(file="details.csv", header=TRUE, sep=",")
details <- read.csv(file="details.csv", header=TRUE, sep=",")
details
sales <- read.csv(file="sales.csv", header=TRUE, sep=",")
getwd()
details <- read.csv(file="details.csv", header=TRUE, sep=",")
details$profit <- details$price - details$cost # Profit = Price - Cost
sales <- read.csv(file="sales.csv", header=TRUE, sep=",")
sales$day <- weekdays(as.Date(sales$date)) # dates in terms of days of the week
library(plyr)
# average demand per day = number of sandwiches sold per day / total of sandwiches sold
ham <- ddply(sales, .(day), summarize, avg.demand = sum(demand.ham)/length(demand.ham))
# average profit per day = average demand per day * profit per sandwich
ham$avg.profit <- ham$avg.demand * details$profit[1]
(ham)
turkey <- ddply(sales, .(day), summarize, avg.demand =
sum(demand.turkey)/length(demand.turkey))
turkey$avg.profit <- turkey$avg.demand * details$profit[1]
(turkey)
veggie <- ddply(sales, .(day), summarize, avg.demand =
sum(demand.veggie)/length(demand.veggie))
veggie$avg.profit <- veggie$avg.demand * details$profit[1]
(veggie)
avg.demand <- data.frame(ham$day, round(ham$avg.demand,2), round(turkey$avg.demand,2),
round(veggie$avg.demand,2), stringsAsFactors=FALSE)
colnames(avg.demand) <- c("Day", "Ham", "Turkey", "Veggie")
(avg.demand)
avg.profit <- data.frame(ham$day, round(ham$avg.profit,2), round(turkey$avg.profit,2),
round(veggie$avg.profit,2), stringsAsFactors=FALSE)
colnames(avg.profit) <- c("Day", "Ham", "Turkey", "Veggie")
(avg.profit)
avg.demand$Day[avg.demand$Day=='Monday'] <- 1
avg.demand$Day[avg.demand$Day=='Tuesday'] <- 2
avg.demand$Day[avg.demand$Day=='Wednesday'] <- 3
avg.demand$Day[avg.demand$Day=='Thursday'] <- 4
avg.demand$Day[avg.demand$Day=='Friday'] <- 5
avg.demand <- avg.demand[order(avg.demand$Day,avg.demand$Ham,avg.demand$Turkey,
avg.demand$Veggie),]
avg.profit$Day[avg.profit$Day=='Monday'] <- 1
avg.profit$Day[avg.profit$Day=='Tuesday'] <- 2
avg.profit$Day[avg.profit$Day=='Wednesday'] <- 3
avg.profit$Day[avg.profit$Day=='Thursday'] <- 4
avg.profit$Day[avg.profit$Day=='Friday'] <- 5
avg.profit <- avg.profit[order(avg.profit$Day,avg.profit$Ham,avg.profit$Turkey,
avg.profit$Veggie),]
# we'll need the reshape2 package to convert our data from wide to long,
# to be able to better display it
library(reshape2)
demand.long <- melt(avg.demand, id.vars="Day")
profit.long <- melt(avg.profit, id.vars="Day")
# and the ggplot2 package for our graphs
library(ggplot2)
demand.plot <- ggplot(demand.long, aes(x=variable, y=value, fill=Day)) +
geom_bar(position="dodge",stat="identity") +
labs(title="Distribution of Demand", x="Sandwich type", y="Average demand") +
scale_fill_discrete(labels=unique(sales$day)) +
scale_x_discrete(breaks=NULL, labels=NULL) +
facet_grid(Day ~ variable)
demand.plot
profit.plot <- ggplot(profit.long, aes(x=variable, y=value, fill=Day)) +
geom_bar(position="dodge",stat="identity") +
labs(title="Distribution of Profit", x="Sandwich type", y="Average profit") +
scale_fill_discrete(labels=unique(sales$day)) +
scale_x_discrete(breaks=NULL, labels=NULL) +
facet_grid(Day ~ variable)
profit.plot
(ideal.inventory <- data.frame(Day=unique(sales$day), Ham=ceiling(avg.demand$Ham),
Turkey=ceiling(avg.demand$Turkey),
Veggie=ceiling(avg.demand$Veggie)))
getwd()
demand.plot <- ggplot(demand.long, aes(x=variable, y=value, fill=Day)) +
geom_bar(position="dodge",stat="identity") +
labs(title="Distribution of Demand", x="Sandwich type", y="Average demand") +
scale_fill_discrete(labels=unique(sales$day)) +
scale_x_discrete(breaks=NULL, labels=NULL) +
facet_grid(Day ~ variable)
demand.plot
?pbinom
pbinom(9, 160, 0.113)
set.seed(496)
N <- 160
price <- 75
noshow.prob <- 0.113
rebook.cost <- 100
front.revenue <- N*price
front.revenue
noshows <- rbinom(n=100000, size=N, prob=noshow.prob)
noshows
N
shows <- N - noshows
shows
rebooks <- shows - 150
rebooks
rebooks <- ifelse(rebooks < 0, 0, rebooks)
rebooks
sum(rebooks)
rebook.cost
expected.cost <- (sum(rebooks) * rebook.cost)/100000
expected.cost
set.seed(496)
N <- 160
price <- 75
noshow.prob <- 0.113
rebook.cost <- 100
front.revenue <- N*price
noshows <- rbinom(n=100000, size=N, prob=noshow.prob)  #gives a vector
shows <- N - noshows  #gives a vector of shows
rebooks <- shows - 150
rebooks <- ifelse(rebooks < 0, 0, rebooks)
expected.cost <- (sum(rebooks) * rebook.cost)/100000
expected.cost
(expected.revenue <- front.revenue - expected.cost)
front.revenue
set.seed(1024)
N <- 155
price <- 80
noshow.prob <- 0.032
rebook.cost <- 100
front.revenue <- N * price
noshows <- rbinom(n=100000, size=N, prob=noshow.prob)
shows <- N - noshows
rebooks <- shows - 150
rebooks <- ifelse(rebooks < 0, 0, rebooks)
expected.cost <- (sum(rebooks) * rebook.cost)/100000
(expected.revenue <- front.revenue - expected.cost)
x <- 31:81
prob.one.x <- exp(5.085-(0.1156*x))/(1+exp(5.085-(0.1156*x)))
prob.one.x
prob.no.failures <- round(choose(6,0)*(prob.one.x)^0* (1-prob.one.x)^6,3)
prob.no.failures
names(prob.no.failures) <- x
print(prob.no.failures)
url = "http://en.widipedia.org/wiki/Country_population"
url
tbls = readHTMLTable(url)
install.packages("XML")
library("XML")
tbls = readHTMLTable(url)
tbls
source('~/.active-rstudio-document', echo=TRUE)
class(tbls)
View(tbls)
tbls
str(tbls)
tbls = readHTMLTable(url)
url = "http://en.widipedia.org/wiki/Country_population"
tbls = readHTMLTable(url)
str(tbls)
library("XML")
library("XML")
url = "http://en.widipedia.org/wiki/Country_population"
tbls = readHTMLTable(url)
str(tbls)
tbls
sapply(tbls, nrow)
setwd("C:/Users/Suman/Dropbox/Sem-I/Prog/github/607Project3/summary")
author("IS607 Project 3 Summary")
library(slidify)
author("IS607 Project 3 Summary")
